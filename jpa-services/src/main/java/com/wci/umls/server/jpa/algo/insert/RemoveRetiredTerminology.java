/*
 *    Copyright 2019 West Coast Informatics, LLC
 */
package com.wci.umls.server.jpa.algo.insert;

import java.util.List;
import java.util.Properties;
import java.util.UUID;

import com.wci.umls.server.AlgorithmParameter;
import com.wci.umls.server.ValidationResult;
import com.wci.umls.server.jpa.AlgorithmParameterJpa;
import com.wci.umls.server.jpa.ValidationResultJpa;
import com.wci.umls.server.jpa.algo.AbstractInsertMaintReleaseAlgorithm;
import com.wci.umls.server.jpa.algo.RemoveTerminologyAlgorithm;
import com.wci.umls.server.model.meta.Terminology;

/**
 * Implementation of an algorithm to remove a retired terminology as part of an
 * insertion.
 */
public class RemoveRetiredTerminology
    extends AbstractInsertMaintReleaseAlgorithm {

  /** The terminology. */
  private String terminology;

  /** The version. */
  private String version;

  /**
   * Instantiates an empty {@link RemoveRetiredTerminology}.
   * @throws Exception if anything goes wrong
   */
  public RemoveRetiredTerminology() throws Exception {
    super();
    setActivityId(UUID.randomUUID().toString());
    setWorkId("REMOVERETIREDTERMINOLOGY");
    setLastModifiedBy("admin");
  }

  /**
   * Check preconditions.
   *
   * @return the validation result
   * @throws Exception the exception
   */
  /* see superclass */
  @Override
  public ValidationResult checkPreconditions() throws Exception {

    ValidationResult validationResult = new ValidationResultJpa();

    if (getProject() == null) {
      throw new Exception(
          "Remove Retired Terminology requires a project to be set");
    }

    if (terminology == null) {
      throw new Exception("Remove Retired Terminology requires a terminology");
    }

    if (version == null) {
      throw new Exception("Remove Retired Terminology requires a version");
    }

    Terminology terminologyToRemove = getTerminology(terminology, version);

    if (terminologyToRemove == null) {
      throw new Exception("Terminology " + terminology + " and version "
          + version + " not found.");
    }

    return validationResult;
  }

  /**
   * Compute.
   *
   * @throws Exception the exception
   */
  /* see superclass */
  @Override
  public void compute() throws Exception {
    logInfo("Starting " + getName());

    // No molecular actions will be generated by this algorithm
    setMolecularActionFlag(false);

    try {

      logInfo(
          "[Remove Retired Terminology] Removing contents retired terminology.");
      commitClearBegin();

      // Set the terminology to non-current
      Terminology retiredTerminology = getTerminology(terminology, version);
      retiredTerminology.setCurrent(false);
      updateTerminology(retiredTerminology);
      
      // For the specified terminology, run removeTerminologies on it (keep
      // the terminology itself for tracking purposes).
      final RemoveTerminologyAlgorithm algo = new RemoveTerminologyAlgorithm();
      try {
        logInfo("  Removing content associated with " + terminology + "/"
            + version);

        algo.setLastModifiedBy(getLastModifiedBy());
        algo.setTerminology(terminology);
        algo.setVersion(version);
        algo.setKeepTerminology(true);
        algo.setWorkId(getWorkId());
        algo.setActivityId(getActivityId());
        algo.setProject(getProject());
        algo.compute();
        algo.close();

      } catch (Exception e) {
        logError("Unexpected problem - " + e.getMessage());
        algo.rollback();
        algo.close();
        throw e;
      }

      // Update the progress
      updateProgress();

      logInfo("[Remove Retired Terminology] Removed content for " + terminology
          + "/" + version);

      commitClearBegin();

      logInfo("  project = " + getProject().getId());
      logInfo("  workId = " + getWorkId());
      logInfo("  activityId = " + getActivityId());
      logInfo("  user  = " + getLastModifiedBy());
      logInfo("Finished " + getName());

    } catch (

    Exception e) {
      logError("Unexpected problem - " + e.getMessage());
      throw e;
    }

  }

  /* see superclass */
  @Override
  public void reset() throws Exception {
    logInfo("Starting RESET " + getName());
    // n/a - No reset
    logInfo("Finished RESET " + getName());
  }

  /* see superclass */
  @Override
  public void checkProperties(Properties p) throws Exception {
    checkRequiredProperties(new String[] {
        "terminology", "version"
    }, p);
  }

  /* see superclass */
  @Override
  public void setProperties(Properties p) throws Exception {
    if (p.getProperty("terminology") != null) {
      terminology = String.valueOf(p.getProperty("terminology"));
    }
    if (p.getProperty("version") != null) {
      version = String.valueOf(p.getProperty("version"));
    }
  }

  /**
   * Returns the parameters.
   *
   * @return the parameters
   * @throws Exception the exception
   */
  /* see superclass */
  @Override
  public List<AlgorithmParameter> getParameters() throws Exception {
    final List<AlgorithmParameter> params = super.getParameters();

    // Terminology
    AlgorithmParameter param = new AlgorithmParameterJpa("Terminology",
        "terminology", "The retired terminology to remove", "e.g. NCI", 40,
        AlgorithmParameter.Type.STRING, "");
    params.add(param);

    // Version
    param = new AlgorithmParameterJpa("Version", "version",
        "The version of the retired terminology to remove", "e.g. 2017_06D", 40,
        AlgorithmParameter.Type.STRING, "");
    params.add(param);

    return params;
  }

  /* see superclass */
  @Override
  public String getDescription() {
    return "Removes content for specified terminology";
  }

}