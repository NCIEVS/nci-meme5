/*
 *    Copyright 2015 West Coast Informatics, LLC
 */
package com.wci.umls.server.jpa.algo.release;

import java.io.File;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.UUID;

import org.hibernate.Session;

import com.wci.umls.server.AlgorithmParameter;
import com.wci.umls.server.ValidationResult;
import com.wci.umls.server.helpers.ConfigUtility;
import com.wci.umls.server.helpers.FieldedStringTokenizer;
import com.wci.umls.server.helpers.LocalException;
import com.wci.umls.server.jpa.ValidationResultJpa;
import com.wci.umls.server.jpa.algo.AbstractInsertMaintReleaseAlgorithm;

/**
 * Implementation of an algorithm to truncate and reload mrcui table from the MRCUI.RRF file
 */
public class ReloadMrcuiTableAlgorithm
    extends AbstractInsertMaintReleaseAlgorithm {

  /** The mr dir file. */
  private File mrDirFile = null;

  /**
   * Instantiates an empty {@link ReloadMrcuiTableAlgorithm}.
   * @throws Exception if anything goes wrong
   */
  public ReloadMrcuiTableAlgorithm() throws Exception {
    super();
    setActivityId(UUID.randomUUID().toString());
    setWorkId("RELOADMRCUITABLE");
    setLastModifiedBy("admin");
  }


  /**
   * Compute.
   *
   * @throws Exception the exception
   */
  @SuppressWarnings("deprecation")
  /* see superclass */
  @Override
  public void compute() throws Exception {
    logInfo("Starting " + getName());

    // No Molecular actions will be generated by this algorithm
    setMolecularActionFlag(false);


    // The rebuild involves:
    // Truncating the mrcui table
    // reloading mrcui from the MRCUI.RRF file

    String query = "TRUNCATE TABLE mrcui;";
    logInfo("Performing: " + query);
    commitClearBegin();
    javax.persistence.Query jpaQuery =
        getEntityManager().createNativeQuery(query);
    jpaQuery.executeUpdate();
    
    //
    // Load the MRCUI.RRF file
    //
    final File path = new File(config.getProperty("source.data.dir") + "/"
        + getProcess().getInputPath() + "/" + getProcess().getVersion()
        + "/META");
    
    try {
      Class.forName("com.mysql.cj.jdbc.Driver");
      java.sql.Connection connection =
          DriverManager.getConnection(ConfigUtility.getConfigProperties().getProperty("javax.persistence.jdbc.url"),
              ConfigUtility.getConfigProperties().getProperty("javax.persistence.jdbc.user"),
              ConfigUtility.getConfigProperties().getProperty("javax.persistence.jdbc.password"));
      connection.getMetaData();
      connection.setAutoCommit(false);
      String sql="insert IGNORE into  ncimdb.mrcui values (?, ?, ?, ?, ?, ?, ?) ";

      PreparedStatement preparedStatement = connection.prepareStatement(sql);

      final List<String> lines =
          loadFileIntoStringList(path, "MRCUI.RRF", "", null, null);

      // Set the number of steps to the number of rows to be inserted
      setSteps(lines.size());

      final String fields[] = new String[14];

      int ct = 0; 
      
      for (final String line : lines) {

        FieldedStringTokenizer.split(line, "|", 14, fields);

        // Fields:
        // 0 cui1
        // 1 version
        // 2 rel
        // 3 rela
        // 4 mapreason
        // 5 cui2
        // 6 mapin
        
        preparedStatement.setString(1, fields[0]);
        preparedStatement.setString(2, fields[1]);
        preparedStatement.setString(3, fields[2]);
        preparedStatement.setString(4, fields[3]);
        preparedStatement.setString(5, fields[4]);
        preparedStatement.setString(6, fields[5]);
        preparedStatement.setBoolean(7, fields[6].equals("Y") ? true : false);
        preparedStatement.addBatch();
        ct++;
        
        if ((ct + 1) % 10000 == 0) {
            preparedStatement.executeBatch();
            logInfo("ct : " + ct);
        }
      }
      connection.commit();
      
    } catch (SQLException e) {
      e.printStackTrace();
      throw new LocalException(
          "Could not establish connection to database. Please check database name and credentials.");
    }
      


    commitClearBegin();

    logInfo("Finished " + getName());

  }

  /* see superclass */
  @Override
  public ValidationResult checkPreconditions() throws Exception {
    final ValidationResult result = new ValidationResultJpa();

    if (getProject() == null) {
      throw new Exception("Algorithm requires a project to be set");
    }

    // Check the mr directory
    String mrPath = config.getProperty("source.data.dir") + "/"
        + getProcess().getInputPath() + "/" + getProcess().getVersion()
        + "/META";

    mrDirFile = new File(mrPath);
    if (!mrDirFile.exists()) {
      throw new Exception(
          "Specified input directory does not exist = " + mrPath);
    }

    // Makes sure editing is turned off before continuing
    if(getProject().isEditingEnabled()){
      throw new LocalException("Editing is turned on - disable before continuing.");
    }
    
    // Makes sure automations are turned off before continuing
    if(getProject().isAutomationsEnabled()){
      throw new LocalException("Automations are turned on - disable before continuing.");
    }
    
    
    return result;
  }
  
  /* see superclass */
  @Override
  public void reset() throws Exception {
    logInfo("Starting RESET " + getName());
    // n/a - No reset
    logInfo("Finished RESET " + getName());
  }

  /* see superclass */
  @Override
  public void checkProperties(Properties p) throws Exception {
    // n/a
  }

  /* see superclass */
  @Override
  public void setProperties(Properties p) throws Exception {

  }

  /**
   * Returns the parameters.
   *
   * @return the parameters
   * @throws Exception the exception
   */
  /* see superclass */
  @Override
  public List<AlgorithmParameter> getParameters() throws Exception {
    final List<AlgorithmParameter> params = super.getParameters();

    return params;
  }

  /* see superclass */
  @Override
  public String getDescription() {
    return "Reload the mrcui table";
  }

}