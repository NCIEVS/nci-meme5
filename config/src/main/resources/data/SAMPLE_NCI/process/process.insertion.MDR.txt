{
  "id": 326701,
  "lastModified": 1507757045000,
  "lastModifiedBy": "JFW",
  "timestamp": 1507683454000,
  "name": "Insertion process for MDR",
  "description": "MDR insertion",
  "terminology": "MDR",
  "version": "20_1",
  "feedbackEmail": "wongjf@mail.nih.gov",
  "type": "Insertion",
  "inputPath": "inv/MDR_20_1/insert",
  "projectId": 39751,
  "steps": [
    {
      "id": 326751,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507683466000,
      "name": "Pre Insertion Algorithm",
      "description": "Prepares an insertion to operate and validates starting conditions.",
      "algorithmKey": "PREINSERTION",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": []
    },
    {
      "id": 326752,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507683483000,
      "name": "Metadata Loader Algorithm",
      "description": "Loads and processes MRDOC.RRF, termgroups.src, and sources.src",
      "algorithmKey": "METADATALOADING",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": []
    },
    {
      "id": 326753,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507683492000,
      "name": "Atom Loader Algorithm",
      "description": "Loads and processes a classes_atoms.src file.",
      "algorithmKey": "ATOMLOADING",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": []
    },
    {
      "id": 326754,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507683499000,
      "name": "Relationship Loader Algorithm",
      "description": "Loads and processes relationships.src",
      "algorithmKey": "RELATIONSHIPLOADING",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": []
    },
    {
      "id": 326755,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507683510000,
      "name": "Context Loader Algorithm",
      "description": "Loads and processes contexts.src and computes tree positions where possible from PAR/CHD relationships.",
      "algorithmKey": "CONTEXTLOADING",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": []
    },
    {
      "id": 326756,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507683559000,
      "name": "Semantic Type Loader Algorithm",
      "description": "Loads and processes an attributes.src file to load semantic type components.",
      "algorithmKey": "SEMANTICTYPELOADING",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": []
    },
    {
      "id": 326757,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507683570000,
      "name": "Attribute Loader Algorithm",
      "description": "Loads and processes an attributes.src file to load Attribute and Definition objects.",
      "algorithmKey": "ATTRIBUTELOADING",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": []
    },
    {
      "id": 326758,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507683582000,
      "name": "Precomputed Merge Algorithm - MDR-SRC",
      "description": "Loads and performs merges based on mergefacts.src.",
      "algorithmKey": "PRECOMPUTEDMERGE",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": [
        {
          "name": "Merge Set",
          "fieldName": "mergeSet",
          "placeholder": "e.g. NCI-SY",
          "type": "STRING",
          "length": 10,
          "description": "The merge set to perform the merges on",
          "possibleValues": [],
          "value": "MDR-SRC",
          "values": []
        },
        {
          "name": "Integrity Checks",
          "fieldName": "checkNames",
          "placeholder": "e.g. MGV_B",
          "type": "MULTI",
          "length": 10,
          "description": "The names of the integrity checks to run",
          "possibleValues": [
            "DEFAULT",
            "DT_I2",
            "DT_I3",
            "DT_I3B",
            "DT_M1",
            "DT_PN2",
            "MGV_A4",
            "MGV_B",
            "MGV_C",
            "MGV_E",
            "MGV_F",
            "MGV_G",
            "MGV_H1",
            "MGV_H2",
            "MGV_I",
            "MGV_M",
            "MGV_NCIPN",
            "MGV_SCUI",
            "MGV_SDUI"
          ],
          "value": "",
          "values": []
        },
        {
          "name": "Filter Query Type",
          "fieldName": "filterQueryType",
          "placeholder": "e.g. JPQL",
          "type": "ENUM",
          "length": 200,
          "description": "The language the filter query is written in",
          "possibleValues": [
            "JPQL",
            "SQL",
            "LUCENE",
            "PROGRAM"
          ],
          "value": "",
          "values": []
        },
        {
          "name": "Filter Query",
          "fieldName": "filterQuery",
          "placeholder": "e.g. query in format of the query type",
          "type": "TEXT",
          "length": 4000,
          "description": "A filter query to further restrict the objects to run the merge on",
          "possibleValues": [],
          "value": "",
          "values": []
        }
      ]
    },
    {
      "id": 326759,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507683582000,
      "name": "Precomputed Merge Algorithm - MDR-AB",
      "description": "Loads and performs merges based on mergefacts.src.",
      "algorithmKey": "PRECOMPUTEDMERGE",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": [
        {
          "name": "Merge Set",
          "fieldName": "mergeSet",
          "placeholder": "e.g. NCI-SY",
          "type": "STRING",
          "length": 10,
          "description": "The merge set to perform the merges on",
          "possibleValues": [],
          "value": "MDR-AB",
          "values": []
        },
        {
          "name": "Integrity Checks",
          "fieldName": "checkNames",
          "placeholder": "e.g. MGV_B",
          "type": "MULTI",
          "length": 10,
          "description": "The names of the integrity checks to run",
          "possibleValues": [
            "DEFAULT",
            "DT_I2",
            "DT_I3",
            "DT_I3B",
            "DT_M1",
            "DT_PN2",
            "MGV_A4",
            "MGV_B",
            "MGV_C",
            "MGV_E",
            "MGV_F",
            "MGV_G",
            "MGV_H1",
            "MGV_H2",
            "MGV_I",
            "MGV_M",
            "MGV_NCIPN",
            "MGV_SCUI",
            "MGV_SDUI"
          ],
          "value": "",
          "values": []
        },
        {
          "name": "Filter Query Type",
          "fieldName": "filterQueryType",
          "placeholder": "e.g. JPQL",
          "type": "ENUM",
          "length": 200,
          "description": "The language the filter query is written in",
          "possibleValues": [
            "JPQL",
            "SQL",
            "LUCENE",
            "PROGRAM"
          ],
          "value": "",
          "values": []
        },
        {
          "name": "Filter Query",
          "fieldName": "filterQuery",
          "placeholder": "e.g. query in format of the query type",
          "type": "TEXT",
          "length": 4000,
          "description": "A filter query to further restrict the objects to run the merge on",
          "possibleValues": [],
          "value": "",
          "values": []
        }
      ]
    },
    {
      "id": 326760,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507683582000,
      "name": "Precomputed Merge Algorithm - MDR-AE",
      "description": "Loads and performs merges based on mergefacts.src.",
      "algorithmKey": "PRECOMPUTEDMERGE",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": [
        {
          "name": "Merge Set",
          "fieldName": "mergeSet",
          "placeholder": "e.g. NCI-SY",
          "type": "STRING",
          "length": 10,
          "description": "The merge set to perform the merges on",
          "possibleValues": [],
          "value": "MDR-AE",
          "values": []
        },
        {
          "name": "Integrity Checks",
          "fieldName": "checkNames",
          "placeholder": "e.g. MGV_B",
          "type": "MULTI",
          "length": 10,
          "description": "The names of the integrity checks to run",
          "possibleValues": [
            "DEFAULT",
            "DT_I2",
            "DT_I3",
            "DT_I3B",
            "DT_M1",
            "DT_PN2",
            "MGV_A4",
            "MGV_B",
            "MGV_C",
            "MGV_E",
            "MGV_F",
            "MGV_G",
            "MGV_H1",
            "MGV_H2",
            "MGV_I",
            "MGV_M",
            "MGV_NCIPN",
            "MGV_SCUI",
            "MGV_SDUI"
          ],
          "value": "",
          "values": []
        },
        {
          "name": "Filter Query Type",
          "fieldName": "filterQueryType",
          "placeholder": "e.g. JPQL",
          "type": "ENUM",
          "length": 200,
          "description": "The language the filter query is written in",
          "possibleValues": [
            "JPQL",
            "SQL",
            "LUCENE",
            "PROGRAM"
          ],
          "value": "",
          "values": []
        },
        {
          "name": "Filter Query",
          "fieldName": "filterQuery",
          "placeholder": "e.g. query in format of the query type",
          "type": "TEXT",
          "length": 4000,
          "description": "A filter query to further restrict the objects to run the merge on",
          "possibleValues": [],
          "value": "",
          "values": []
        }
      ]
    },
    {
      "id": 326761,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507683582000,
      "name": "Precomputed Merge Algorithm - MDR-EX",
      "description": "Loads and performs merges based on mergefacts.src.",
      "algorithmKey": "PRECOMPUTEDMERGE",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": [
        {
          "name": "Merge Set",
          "fieldName": "mergeSet",
          "placeholder": "e.g. NCI-SY",
          "type": "STRING",
          "length": 10,
          "description": "The merge set to perform the merges on",
          "possibleValues": [],
          "value": "MDR-EX",
          "values": []
        },
        {
          "name": "Integrity Checks",
          "fieldName": "checkNames",
          "placeholder": "e.g. MGV_B",
          "type": "MULTI",
          "length": 10,
          "description": "The names of the integrity checks to run",
          "possibleValues": [
            "DEFAULT",
            "DT_I2",
            "DT_I3",
            "DT_I3B",
            "DT_M1",
            "DT_PN2",
            "MGV_A4",
            "MGV_B",
            "MGV_C",
            "MGV_E",
            "MGV_F",
            "MGV_G",
            "MGV_H1",
            "MGV_H2",
            "MGV_I",
            "MGV_M",
            "MGV_NCIPN",
            "MGV_SCUI",
            "MGV_SDUI"
          ],
          "value": "",
          "values": []
        },
        {
          "name": "Filter Query Type",
          "fieldName": "filterQueryType",
          "placeholder": "e.g. JPQL",
          "type": "ENUM",
          "length": 200,
          "description": "The language the filter query is written in",
          "possibleValues": [
            "JPQL",
            "SQL",
            "LUCENE",
            "PROGRAM"
          ],
          "value": "",
          "values": []
        },
        {
          "name": "Filter Query",
          "fieldName": "filterQuery",
          "placeholder": "e.g. query in format of the query type",
          "type": "TEXT",
          "length": 4000,
          "description": "A filter query to further restrict the objects to run the merge on",
          "possibleValues": [],
          "value": "",
          "values": []
        }
      ]
    },
    {
      "id": 326762,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507684642000,
      "name": "Precomputed Merge Algorithm - MDR-CODE",
      "description": "Loads and performs merges based on mergefacts.src.",
      "algorithmKey": "PRECOMPUTEDMERGE",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": [
        {
          "name": "Merge Set",
          "fieldName": "mergeSet",
          "placeholder": "e.g. NCI-SY",
          "type": "STRING",
          "length": 10,
          "description": "The merge set to perform the merges on",
          "possibleValues": [],
          "value": "MDR-CODE",
          "values": []
        },
        {
          "name": "Integrity Checks",
          "fieldName": "checkNames",
          "placeholder": "e.g. MGV_B",
          "type": "MULTI",
          "length": 10,
          "description": "The names of the integrity checks to run",
          "possibleValues": [
            "DEFAULT",
            "DT_I2",
            "DT_I3",
            "DT_I3B",
            "DT_M1",
            "DT_PN2",
            "MGV_A4",
            "MGV_B",
            "MGV_C",
            "MGV_E",
            "MGV_F",
            "MGV_G",
            "MGV_H1",
            "MGV_H2",
            "MGV_I",
            "MGV_M",
            "MGV_NCIPN",
            "MGV_SCUI",
            "MGV_SDUI"
          ],
          "value": "",
          "values": [
            "DEFAULT",
            "DT_I2",
            "DT_I3",
            "DT_I3B",
            "DT_M1",
            "DT_PN2",
            "MGV_A4",
            "MGV_B",
            "MGV_C",
            "MGV_E",
            "MGV_F",
            "MGV_G",
            "MGV_H1",
            "MGV_H2",
            "MGV_I",
            "MGV_M",
            "MGV_NCIPN",
            "MGV_SCUI",
            "MGV_SDUI"
          ]
        },
        {
          "name": "Filter Query Type",
          "fieldName": "filterQueryType",
          "placeholder": "e.g. JPQL",
          "type": "ENUM",
          "length": 200,
          "description": "The language the filter query is written in",
          "possibleValues": [
            "JPQL",
            "SQL",
            "LUCENE",
            "PROGRAM"
          ],
          "value": "",
          "values": []
        },
        {
          "name": "Filter Query",
          "fieldName": "filterQuery",
          "placeholder": "e.g. query in format of the query type",
          "type": "TEXT",
          "length": 4000,
          "description": "A filter query to further restrict the objects to run the merge on",
          "possibleValues": [],
          "value": "",
          "values": []
        }
      ]
    },
    {
      "id": 326763,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507683947000,
      "name": "Generated Merge Algorithm - REPL",
      "description": "Replace all termgroups",
      "algorithmKey": "GENERATEDMERGE",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": [
        {
          "name": "Query Type",
          "fieldName": "queryType",
          "placeholder": "e.g. JPQL",
          "type": "ENUM",
          "length": 200,
          "description": "The language the query is written in",
          "possibleValues": [
            "JPQL",
            "SQL"
          ],
          "value": "JPQL",
          "values": []
        },
        {
          "name": "Query",
          "fieldName": "query",
          "placeholder": "e.g. SELECT a.id, b.id FROM AtomJpa a, AtomJpa b ...",
          "type": "QUERY_ID_PAIR",
          "length": 4000,
          "description": "A query to perform action only on objects that meet the criteria",
          "possibleValues": [],
          "value": "select distinct a1.id, a2.id from ConceptJpa c1 join c1.atoms a1, ConceptJpa c2 join c2.atoms a2 where c1.terminology = :projectTerminology and c2.terminology = :projectTerminology and c1.id != c2.id and a1.terminology = :terminology and a1.version = :version and a1.publishable = true and a2.terminology = :terminology and a2.version != :version and a2.publishable = true and a1.codeId = a2.codeId and a1.lexicalClassId = a2.lexicalClassId and not a1.termType in (select tty.abbreviation from TermTypeJpa tty where terminology = :projectTerminology and exclude = true) and not a2.termType in (select tty.abbreviation from TermTypeJpa tty where terminology = :projectTerminology and exclude = true) and not a1.termType in (select tty.abbreviation from TermTypeJpa tty where terminology = :projectTerminology and normExclude = true) and not a2.termType in (select tty.abbreviation from TermTypeJpa tty where terminology = :projectTerminology and normExclude = true)",
          "values": []
        },
        {
          "name": "Integrity Checks",
          "fieldName": "checkNames",
          "placeholder": "e.g. MGV_B",
          "type": "MULTI",
          "length": 200,
          "description": "The names of the integrity checks to run",
          "possibleValues": [
            "DEFAULT",
            "DT_I2",
            "DT_I3",
            "DT_I3B",
            "DT_M1",
            "DT_PN2",
            "MGV_A4",
            "MGV_B",
            "MGV_C",
            "MGV_E",
            "MGV_F",
            "MGV_G",
            "MGV_H1",
            "MGV_H2",
            "MGV_I",
            "MGV_M",
            "MGV_NCIPN",
            "MGV_SCUI",
            "MGV_SDUI"
          ],
          "value": "",
          "values": [
            "DEFAULT",
            "DT_I2",
            "DT_I3",
            "DT_I3B",
            "DT_M1",
            "DT_PN2",
            "MGV_A4",
            "MGV_B",
            "MGV_C",
            "MGV_E",
            "MGV_F",
            "MGV_G",
            "MGV_H1",
            "MGV_H2",
            "MGV_I",
            "MGV_M",
            "MGV_NCIPN",
            "MGV_SCUI",
            "MGV_SDUI"
          ]
        },
        {
          "name": "New Atoms Only Filter",
          "fieldName": "newAtomsOnly",
          "placeholder": "e.g. true",
          "type": "BOOLEAN",
          "length": 5,
          "description": "Restrict to new atoms only?",
          "possibleValues": [],
          "value": "false",
          "values": []
        },
        {
          "name": "Filter Query Type",
          "fieldName": "filterQueryType",
          "placeholder": "e.g. JPQL",
          "type": "ENUM",
          "length": 200,
          "description": "The language the filter query is written in",
          "possibleValues": [
            "JPQL",
            "SQL",
            "LUCENE",
            "PROGRAM"
          ],
          "value": "",
          "values": []
        },
        {
          "name": "Filter Query",
          "fieldName": "filterQuery",
          "placeholder": "e.g. query in format of the query type",
          "type": "TEXT",
          "length": 4000,
          "description": "A filter query to further restrict the objects to run the merge on",
          "possibleValues": [],
          "value": "",
          "values": []
        },
        {
          "name": "Make Demotions",
          "fieldName": "makeDemotions",
          "placeholder": "e.g. true",
          "type": "BOOLEAN",
          "length": 5,
          "description": "Make demotions for failed merges?",
          "possibleValues": [],
          "value": "true",
          "values": []
        },
        {
          "name": "Change Status",
          "fieldName": "changeStatus",
          "placeholder": "e.g. true",
          "type": "BOOLEAN",
          "length": 5,
          "description": "Change status when performing merges?",
          "possibleValues": [],
          "value": "true",
          "values": []
        },
        {
          "name": "Merge Set",
          "fieldName": "mergeSet",
          "placeholder": "e.g. NCI-SY",
          "type": "STRING",
          "length": 10,
          "description": "The merge set to perform the merges on",
          "possibleValues": [],
          "value": "MDR-REPL",
          "values": []
        }
      ]
    },
    {
      "id": 326764,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507683947000,
      "name": "Generated Merge Algorithm - MDR-M2",
      "description": "Merge LLT, OL, PT with each other.",
      "algorithmKey": "GENERATEDMERGE",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": [
        {
          "name": "Query Type",
          "fieldName": "queryType",
          "placeholder": "e.g. JPQL",
          "type": "ENUM",
          "length": 200,
          "description": "The language the query is written in",
          "possibleValues": [
            "JPQL",
            "SQL"
          ],
          "value": "JPQL",
          "values": []
        },
        {
          "name": "Query",
          "fieldName": "query",
          "placeholder": "e.g. SELECT a.id, b.id FROM AtomJpa a, AtomJpa b ...",
          "type": "QUERY_ID_PAIR",
          "length": 4000,
          "description": "A query to perform action only on objects that meet the criteria",
          "possibleValues": [],
          "value": "select\n  distinct a1.id,\n  a2.id\nfrom\n  ConceptJpa c1\n  join c1.atoms a1,\n  ConceptJpa c2\n  join c2.atoms a2\nwhere\n  c1.terminology = :projectTerminology\n  and c2.terminology = :projectTerminology\n  and c1.id != c2.id\n  and a1.terminology = :terminology\n  and a1.version = :version\n  and a1.termType in ('LLT','OL','PT')\n  and a1.publishable = true\n  and a2.terminology = :terminology\n  and a2.version = :version\n  and a2.termType in ('LLT','OL','PT')\n  and a2.publishable = true\n  and a1.lexicalClassId = a2.lexicalClassId\n  and not a1.termType in (\n    select\n      tty.abbreviation\n    from\n      TermTypeJpa tty\n    where\n      terminology = :projectTerminology\n      and exclude = true\n  )\n  and not a2.termType in (\n    select\n      tty.abbreviation\n    from\n      TermTypeJpa tty\n    where\n      terminology = :projectTerminology\n      and exclude = true\n  )\n  and not a1.termType in (\n    select\n      tty.abbreviation\n    from\n      TermTypeJpa tty\n    where\n      terminology = :projectTerminology\n      and normExclude = true\n  )\n  and not a2.termType in (\n    select\n      tty.abbreviation\n    from\n      TermTypeJpa tty\n    where\n      terminology = :projectTerminology\n      and normExclude = true\n  )",
          "values": []
        },
        {
          "name": "Integrity Checks",
          "fieldName": "checkNames",
          "placeholder": "e.g. MGV_B",
          "type": "MULTI",
          "length": 200,
          "description": "The names of the integrity checks to run",
          "possibleValues": [
            "DEFAULT",
            "DT_I2",
            "DT_I3",
            "DT_I3B",
            "DT_M1",
            "DT_PN2",
            "MGV_A4",
            "MGV_B",
            "MGV_C",
            "MGV_E",
            "MGV_F",
            "MGV_G",
            "MGV_H1",
            "MGV_H2",
            "MGV_I",
            "MGV_M",
            "MGV_NCIPN",
            "MGV_SCUI",
            "MGV_SDUI"
          ],
          "value": "",
          "values": [
            "DEFAULT",
            "DT_I2",
            "DT_I3",
            "DT_I3B",
            "DT_M1",
            "DT_PN2",
            "MGV_A4",
            "MGV_B",
            "MGV_C",
            "MGV_E",
            "MGV_F",
            "MGV_G",
            "MGV_H1",
            "MGV_H2",
            "MGV_I",
            "MGV_M",
            "MGV_NCIPN",
            "MGV_SCUI",
            "MGV_SDUI"
          ]
        },
        {
          "name": "New Atoms Only Filter",
          "fieldName": "newAtomsOnly",
          "placeholder": "e.g. true",
          "type": "BOOLEAN",
          "length": 5,
          "description": "Restrict to new atoms only?",
          "possibleValues": [],
          "value": "false",
          "values": []
        },
        {
          "name": "Filter Query Type",
          "fieldName": "filterQueryType",
          "placeholder": "e.g. JPQL",
          "type": "ENUM",
          "length": 200,
          "description": "The language the filter query is written in",
          "possibleValues": [
            "JPQL",
            "SQL",
            "LUCENE",
            "PROGRAM"
          ],
          "value": "",
          "values": []
        },
        {
          "name": "Filter Query",
          "fieldName": "filterQuery",
          "placeholder": "e.g. query in format of the query type",
          "type": "TEXT",
          "length": 4000,
          "description": "A filter query to further restrict the objects to run the merge on",
          "possibleValues": [],
          "value": "",
          "values": []
        },
        {
          "name": "Make Demotions",
          "fieldName": "makeDemotions",
          "placeholder": "e.g. true",
          "type": "BOOLEAN",
          "length": 5,
          "description": "Make demotions for failed merges?",
          "possibleValues": [],
          "value": "true",
          "values": []
        },
        {
          "name": "Change Status",
          "fieldName": "changeStatus",
          "placeholder": "e.g. true",
          "type": "BOOLEAN",
          "length": 5,
          "description": "Change status when performing merges?",
          "possibleValues": [],
          "value": "true",
          "values": []
        },
        {
          "name": "Merge Set",
          "fieldName": "mergeSet",
          "placeholder": "e.g. NCI-SY",
          "type": "STRING",
          "length": 10,
          "description": "The merge set to perform the merges on",
          "possibleValues": [],
          "value": "MDR-M2",
          "values": []
        }
      ]
    },
    {
      "id": 326765,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507684093000,
      "name": "Safe Replace Algorithm",
      "description": "Performs criteria-based safe replacement algorithm.",
      "algorithmKey": "SAFEREPLACE",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": [
        {
          "name": "String Class Id",
          "fieldName": "stringClassId",
          "placeholder": "e.g. true",
          "type": "BOOLEAN",
          "length": 5,
          "description": "Match atoms by String Class Id?",
          "possibleValues": [],
          "value": "true",
          "values": []
        },
        {
          "name": "Lexical Class Id",
          "fieldName": "lexicalClassId",
          "placeholder": "e.g. true",
          "type": "BOOLEAN",
          "length": 5,
          "description": "Match atoms by Lexical Class Id?",
          "possibleValues": [],
          "value": "false",
          "values": []
        },
        {
          "name": "Code Id",
          "fieldName": "codeId",
          "placeholder": "e.g. true",
          "type": "BOOLEAN",
          "length": 5,
          "description": "Match atoms by Code Id?",
          "possibleValues": [],
          "value": "false",
          "values": []
        },
        {
          "name": "Concept Id",
          "fieldName": "conceptId",
          "placeholder": "e.g. true",
          "type": "BOOLEAN",
          "length": 5,
          "description": "Match atoms by Concept Id?",
          "possibleValues": [],
          "value": "false",
          "values": []
        },
        {
          "name": "Descriptor Id",
          "fieldName": "descriptorId",
          "placeholder": "e.g. true",
          "type": "BOOLEAN",
          "length": 5,
          "description": "Match atoms by Descriptor Id?",
          "possibleValues": [],
          "value": "false",
          "values": []
        },
        {
          "name": "Term Type",
          "fieldName": "termType",
          "placeholder": "e.g. true",
          "type": "BOOLEAN",
          "length": 5,
          "description": "Match atoms by Term Type?",
          "possibleValues": [],
          "value": "false",
          "values": []
        },
        {
          "name": "Terminology",
          "fieldName": "terminology",
          "placeholder": "e.g. NCI",
          "type": "STRING",
          "length": 5,
          "description": "Terminology to run safe replacement on (if left blank, will run on all terminologies referenced in sources.src",
          "possibleValues": [],
          "value": "MDR",
          "values": []
        }
      ]
    },
    {
      "id": 326766,
      "lastModified": 1507757098000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507684121000,
      "name": "Mid Merge Algorithm - MDR-MID",
      "description": "MID merging",
      "algorithmKey": "MIDMERGE",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": [
        {
          "name": "Query Type",
          "fieldName": "queryType",
          "placeholder": "e.g. JPQL",
          "type": "ENUM",
          "length": 200,
          "description": "The language the query is written in",
          "possibleValues": [
            "JPQL",
            "SQL"
          ],
          "value": "JPQL",
          "values": []
        },
        {
          "name": "Query",
          "fieldName": "query",
          "placeholder": "e.g. SELECT a.id, b.id FROM AtomJpa a, AtomJpa b ...",
          "type": "QUERY_ID_PAIR",
          "length": 4000,
          "description": "A query to perform action only on objects that meet the criteria",
          "possibleValues": [],
          "value": "select distinct a1.id, a2.id from ConceptJpa c1 join c1.atoms a1, ConceptJpa c2 join c2.atoms a2 where c1.terminology = :projectTerminology and c2.terminology = :projectTerminology and c1.id != c2.id and a1.terminology = :terminology and a1.version = :version and a1.workflowStatus = 'NEEDS_REVIEW' and a1.publishable = true and a2.terminology != :terminology and a2.publishable = true and a1.lexicalClassId = a2.lexicalClassId and not a1.termType in (select tty.abbreviation from TermTypeJpa tty where terminology = :projectTerminology and exclude = true) and not a2.termType in (select tty.abbreviation from TermTypeJpa tty where terminology = :projectTerminology and exclude = true) and not a1.termType in (select tty.abbreviation from TermTypeJpa tty where terminology = :projectTerminology and normExclude = true) and not a2.termType in (select tty.abbreviation from TermTypeJpa tty where terminology = :projectTerminology and normExclude = true)",
          "values": []
        },
        {
          "name": "Integrity Checks",
          "fieldName": "checkNames",
          "placeholder": "e.g. MGV_B",
          "type": "MULTI",
          "length": 200,
          "description": "The names of the integrity checks to run",
          "possibleValues": [
            "DEFAULT",
            "DT_I2",
            "DT_I3",
            "DT_I3B",
            "DT_M1",
            "DT_PN2",
            "MGV_A4",
            "MGV_B",
            "MGV_C",
            "MGV_E",
            "MGV_F",
            "MGV_G",
            "MGV_H1",
            "MGV_H2",
            "MGV_I",
            "MGV_M",
            "MGV_NCIPN",
            "MGV_SCUI",
            "MGV_SDUI"
          ],
          "value": "",
          "values": [
            "DEFAULT",
            "DT_I2",
            "DT_I3",
            "DT_I3B",
            "DT_M1",
            "DT_PN2",
            "MGV_A4",
            "MGV_B",
            "MGV_C",
            "MGV_E",
            "MGV_F",
            "MGV_G",
            "MGV_H1",
            "MGV_H2",
            "MGV_I",
            "MGV_M",
            "MGV_NCIPN",
            "MGV_SCUI",
            "MGV_SDUI"
          ]
        },
        {
          "name": "New Atoms Only Filter",
          "fieldName": "newAtomsOnly",
          "placeholder": "e.g. true",
          "type": "BOOLEAN",
          "length": 5,
          "description": "Restrict to new atoms only?",
          "possibleValues": [],
          "value": "true",
          "values": []
        },
        {
          "name": "Filter Query Type",
          "fieldName": "filterQueryType",
          "placeholder": "e.g. JPQL",
          "type": "ENUM",
          "length": 200,
          "description": "The language the filter query is written in",
          "possibleValues": [
            "JPQL",
            "SQL",
            "LUCENE",
            "PROGRAM"
          ],
          "value": "",
          "values": []
        },
        {
          "name": "Filter Query",
          "fieldName": "filterQuery",
          "placeholder": "e.g. query in format of the query type",
          "type": "TEXT",
          "length": 4000,
          "description": "A filter query to further restrict the objects to run the merge on",
          "possibleValues": [],
          "value": "",
          "values": []
        },
        {
          "name": "Make Demotions",
          "fieldName": "makeDemotions",
          "placeholder": "e.g. true",
          "type": "BOOLEAN",
          "length": 5,
          "description": "Make demotions for failed merges?",
          "possibleValues": [],
          "value": "true",
          "values": []
        },
        {
          "name": "Change Status",
          "fieldName": "changeStatus",
          "placeholder": "e.g. true",
          "type": "BOOLEAN",
          "length": 5,
          "description": "Change status when performing merges?",
          "possibleValues": [],
          "value": "true",
          "values": []
        },
        {
          "name": "Merge Set",
          "fieldName": "mergeSet",
          "placeholder": "e.g. NCI-SY",
          "type": "STRING",
          "length": 10,
          "description": "The merge set to perform the merges on",
          "possibleValues": [],
          "value": "MDR-MID",
          "values": []
        }
      ]
    },
    {
      "id": 326767,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507684180000,
      "name": "Semantic Type Resolver Algorithm",
      "description": "Resolves insertion semantic types against prior state.",
      "algorithmKey": "SEMANTICTYPERESOLVER",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": [
        {
          "name": "WinLose",
          "fieldName": "winLose",
          "placeholder": "e.g. win",
          "type": "ENUM",
          "length": 200,
          "description": "Whether new SemanticTypes created during this insertion 'win' or 'lose' to old semantic types.",
          "possibleValues": [
            "win",
            "lose"
          ],
          "value": "lose",
          "values": []
        }
      ]
    },
    {
      "id": 326768,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507684195000,
      "name": "Update Releasability Algorithm",
      "description": "Marks old version terminologies as unreleasable.",
      "algorithmKey": "UPDATERELEASABILITY",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": []
    },
    {
      "id": 326769,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507684209000,
      "name": "Bequeath Algorithm",
      "description": "Bequeaths old-versioned SRC concept(s) to the root SRC concept",
      "algorithmKey": "BEQUEATH",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": []
    },
    {
      "id": 326770,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507684905000,
      "name": "Report Checklist Algorithm",
      "description": "Generates standard report table checklists for the insertion.",
      "algorithmKey": "REPORTCHECKLIST",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": []
    },
    {
      "id": 326771,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507684222000,
      "name": "Matrix Initializer Algorithm",
      "description": "Recompute concept status",
      "algorithmKey": "MATRIXINIT",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": []
    },
    {
      "id": 326772,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507684251000,
      "name": "Compute Preferred Names Algorithm",
      "description": "Compute Preferred Names Algorithm",
      "algorithmKey": "PREFNAMES",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": []
    },
    {
      "id": 326773,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507684260000,
      "name": "Repartition Algorithm",
      "description": "Regenerates workflow bins.",
      "algorithmKey": "REPARTITION",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": [
        {
          "name": "Workflow Bin Type",
          "fieldName": "type",
          "placeholder": "e.g. MUTUALLY_EXCLUSIVE",
          "type": "ENUM",
          "length": 40,
          "description": "The type of workflow bin to repartition",
          "possibleValues": [
            "REPORT_DEFINITIONS",
            "MID_VALIDATION",
            "MUTUALLY_EXCLUSIVE",
            "QUALITY_ASSURANCE",
            "QUALITY_ASSURANCE_2",
            "MID_VALIDATION_OTHER"
          ],
          "value": "MUTUALLY_EXCLUSIVE",
          "values": []
        }
      ]
    },
    {
      "id": 326774,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507684918000,
      "name": "Lucene Reindex Algorithm",
      "description": "Lucene Reindex Algorithm",
      "algorithmKey": "REINDEX",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": [
        {
          "name": "Indexed Objects",
          "fieldName": "indexedObjects",
          "placeholder": "",
          "type": "STRING",
          "length": 255,
          "description": "Comma-separated list of simple object class names to reindex.",
          "possibleValues": [],
          "value": "ConceptRelationshipJpa,CodeRelationshipJpa,DescriptorRelationshipJpa",
          "values": []
        }
      ]
    },
    {
      "id": 326775,
      "lastModified": 1507757025000,
      "lastModifiedBy": "JFW",
      "timestamp": 1507684269000,
      "name": "Post Insertion Algorithm",
      "description": "Clears information after an insertion is finished.",
      "algorithmKey": "POSTINSERTION",
      "enabled": true,
      "processId": 326701,
      "projectId": 39751,
      "parameters": []
    }
  ]
}